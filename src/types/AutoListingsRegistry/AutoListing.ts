// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class PairListed extends ethereum.Event {
  get params(): PairListed__Params {
    return new PairListed__Params(this);
  }
}

export class PairListed__Params {
  _event: PairListed;

  constructor(event: PairListed) {
    this._event = event;
  }

  get token0_erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token0_erc223(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token1_erc20(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token1_erc223(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get feeTier(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TokenListed extends ethereum.Event {
  get params(): TokenListed__Params {
    return new TokenListed__Params(this);
  }
}

export class TokenListed__Params {
  _event: TokenListed;

  constructor(event: TokenListed) {
    this._event = event;
  }

  get token_erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_erc223(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AutoListing__getTokenResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  get_erc20(): Address {
    return this.value0;
  }

  get_erc223(): Address {
    return this.value1;
  }
}

export class AutoListing__pairsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getToken1_erc20(): Address {
    return this.value0;
  }

  getToken2_erc20(): Address {
    return this.value1;
  }

  getToken1_erc223(): Address {
    return this.value2;
  }

  getToken2_erc223(): Address {
    return this.value3;
  }
}

export class AutoListing__tokensResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getErc20(): Address {
    return this.value0;
  }

  getErc223(): Address {
    return this.value1;
  }
}

export class AutoListing extends ethereum.SmartContract {
  static bind(address: Address): AutoListing {
    return new AutoListing("AutoListing", address);
  }

  getName(): string {
    let result = super.call("getName", "getName():(string)", []);

    return result[0].toString();
  }

  try_getName(): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getToken(index: BigInt): AutoListing__getTokenResult {
    let result = super.call("getToken", "getToken(uint256):(address,address)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return new AutoListing__getTokenResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_getToken(
    index: BigInt,
  ): ethereum.CallResult<AutoListing__getTokenResult> {
    let result = super.tryCall(
      "getToken",
      "getToken(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoListing__getTokenResult(
        value[0].toAddress(),
        value[1].toAddress(),
      ),
    );
  }

  getURL(): string {
    let result = super.call("getURL", "getURL():(string)", []);

    return result[0].toString();
  }

  try_getURL(): ethereum.CallResult<string> {
    let result = super.tryCall("getURL", "getURL():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isListed(_token: Address): boolean {
    let result = super.call("isListed", "isListed(address):(bool)", [
      ethereum.Value.fromAddress(_token),
    ]);

    return result[0].toBoolean();
  }

  try_isListed(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isListed", "isListed(address):(bool)", [
      ethereum.Value.fromAddress(_token),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  last_update(): BigInt {
    let result = super.call("last_update", "last_update():(uint256)", []);

    return result[0].toBigInt();
  }

  try_last_update(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("last_update", "last_update():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  listed_tokens(param0: Address): BigInt {
    let result = super.call(
      "listed_tokens",
      "listed_tokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_listed_tokens(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "listed_tokens",
      "listed_tokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  num_listed_tokens(): BigInt {
    let result = super.call(
      "num_listed_tokens",
      "num_listed_tokens():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_num_listed_tokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "num_listed_tokens",
      "num_listed_tokens():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairs(param0: BigInt): AutoListing__pairsResult {
    let result = super.call(
      "pairs",
      "pairs(uint256):(address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new AutoListing__pairsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
    );
  }

  try_pairs(param0: BigInt): ethereum.CallResult<AutoListing__pairsResult> {
    let result = super.tryCall(
      "pairs",
      "pairs(uint256):(address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoListing__pairsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
      ),
    );
  }

  tokens(param0: BigInt): AutoListing__tokensResult {
    let result = super.call("tokens", "tokens(uint256):(address,address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return new AutoListing__tokensResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_tokens(param0: BigInt): ethereum.CallResult<AutoListing__tokensResult> {
    let result = super.tryCall("tokens", "tokens(uint256):(address,address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoListing__tokensResult(value[0].toAddress(), value[1].toAddress()),
    );
  }

  url(): string {
    let result = super.call("url", "url():(string)", []);

    return result[0].toString();
  }

  try_url(): ethereum.CallResult<string> {
    let result = super.tryCall("url", "url():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _URL(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ListCall extends ethereum.Call {
  get inputs(): ListCall__Inputs {
    return new ListCall__Inputs(this);
  }

  get outputs(): ListCall__Outputs {
    return new ListCall__Outputs(this);
  }
}

export class ListCall__Inputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeTier(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ListCall__Outputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }
}
